$badge-background-color:          #3ad0b9;
$badge-background-hover-color:    darken($badge-background-color, 10%);
$badge-triangle-background-color: #07947f;
$badge-color:                     $neutral-8;

@mixin arrange-children-in-a-row($gutter: ru(1)) {
  display: flex;
  flex-direction: row;

  > * {
    flex: 1 1;
    align-self: auto;
    margin-left: $gutter / 2;
    margin-right: $gutter / 2;
  }

  > :first-child {
    margin-left: 0;
  }

  > :last-child {
    margin-right: 0;
  }

  @include ie9-arrange-children-in-a-row($gutter)
}

@mixin arrange-children-in-a-column($gutter: ru(1)) {
  display: flex;
  flex-direction: column;

  > * {
    flex: 1 1;
    align-self: auto;
    margin-top: $gutter / 2;
    margin-bottom: $gutter / 2;
  }

  > :first-child {
    margin-top: 0;
  }

  > :last-child {
    margin-bottom: 0;
  }
}

@mixin arrange-in-block-grid($per-row: 5, $gutter: ru(1), $min-width: ru(8)) {
  display: flex;
  flex-wrap: wrap;
  margin-left: -$gutter;
  margin-top: -$gutter;

  > * {
    flex: 1 0 $min-width;
    margin-left: $gutter;
    margin-top: $gutter;

    $column-width: (100% / $per-row);

    @media (min-width: $min-width * $per-row) {
      min-width: calc(#{$column-width} - #{$gutter});
      flex: 1 0 calc(#{$column-width} - #{$gutter});
    }

    @for $i from 2 through $per-row {
      $screen-width: ($min-width * $i) + ($gutter * $i);
      $column-width: (100% / $i);

      @media (min-width: $screen-width) {
        max-width: calc(#{$column-width} - #{$gutter});
        flex: 1 0 calc(#{$column-width} - #{$gutter});
      }
    }
  }

  @include ie9-arrange-in-block-grid($per-row, $gutter, $min-width);
}

@mixin unordered-list-with-bullets {
  list-style-type: disc;
  list-style-position: inside;
  list-style-image: none;
}

@mixin order-list-numbering-without-periods {
  ol {
    counter-reset: item;
    list-style-type: none;
  }

  li {
    display: block;
  }

  li:before {
    content: counter(item) '\00a0';
    counter-increment: item;
    padding-right: .5em;
  }
}

@mixin trustpilot-rating-color($rating, $color) {
  &.#{$rating} {
    .star.filled {
      background-color: $color;
    }

    + .rating strong {
      color: $color;
    }
  }
}

@mixin text-truncation {
  width: 100%;
  display: table;
  table-layout: fixed;
  border-spacing: 0;

  > * {
    display: table-cell;
  }

  .truncate {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
  }
}

@mixin multiline-truncation($lines, $height) {
  display: block;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  -webkit-line-clamp: $lines;
  max-height: $height;
  overflow: hidden;
}

@mixin hover($background-color, $border-color, $color) {
  &:hover,
  &:active,
  &:focus {
    background-color: $background-color;
    border-color: $border-color;
    color: $color;
    text-decoration: none;
  }
}

@mixin hover-action($top, $border-width, $border-color, $background-color, $color) {
  &:hover,
  &:active,
  &:focus {
    top: $top;
    box-shadow: 0 $border-width 0 $border-color;
    background-color: $background-color;
    color: $color;
  }
}

@mixin firefox-hack() {
  @-moz-document url-prefix() {
    @content;
  }
}

@mixin badge($classname,
             $parent-padding,
             $triangle-side-width,
             $offset: '',
             $medium-parent-offset: '',
             $small-parent-offset: '',
             $has-hover: true) {
  position: relative;

  .#{$classname} {
    @include typography-7;
    position: absolute;
    left: ru(-$parent-padding - .2);
    bottom: $triangle-side-width;
    width: ru($parent-padding * 2);
    min-width: rem-calc(32px);
    height: rem-calc(25px);
    padding: 0 ru(.2) 0 0;
    border-radius: 0 ru(.2) ru(.2) 0;
    margin: 0;
    text-align: right;
    color: $badge-color;
    background-color: $badge-background-color;
    transition: background-color .25s ease;

    @if $has-hover {
      &:hover {
        background-color: $badge-background-hover-color;
      }
    }

    &:after {
      content: '';
      position: absolute;
      top: 100%;
      left: 0;
      width: 0;
      height: 0;
      border-style: solid;
      border-width: 0 $triangle-side-width $triangle-side-width 0;
      border-color: transparent $badge-triangle-background-color transparent transparent;
    }

    [class^='icon-'] {
      &:before {
        position: absolute;
        content: '';
        top: ru(.2);
        right: ru(.2);
        width: rem-calc(18px);
        height: rem-calc(19px);
        background-size: 100%;
        background-repeat: no-repeat;
      }
    }
  }

  $sibling-offset: if($offset != '', $parent-padding + $offset, $parent-padding);
  $sibling-offset-small: if($offset != '', $medium-parent-offset + $offset, $medium-parent-offset);
  $sibling-offset-medium: if($offset != '', $small-parent-offset + $offset, $small-parent-offset);

  .#{$classname} + * {
    padding-left: ru($sibling-offset) + $triangle-side-width;
  }

  @if $small-parent-offset != '' {
    @media #{$small-only} {
      .#{$classname} {
        left: ru(-$small-parent-offset - .2);
        width: ru($small-parent-offset * 2);
      }

      .#{$classname} + * {
        padding-left: ru($sibling-offset-small) + $triangle-side-width;
      }
    }
  }

  @media #{$medium-up} {
    // Can be removed once we implement correct font size
    .#{$classname} {
      top: 0;
    }
  }

  @media #{$medium-only} {
    @if $medium-parent-offset != '' {
      .#{$classname} {
        left: ru(-$medium-parent-offset - .2);
        width: ru($medium-parent-offset * 2);
      }

      .#{$classname} + * {
        padding-left: ru($sibling-offset-medium) + $triangle-side-width;
      }
    }
  }
}

// This mixin will allow you to set a width for an element/sub-container in a grid layout
// - It takes into account a parent that is in a grid already and gutter sizes

// $cols: The number of columns you want the element to span
// $total-col-count: Total number of columns the parent container spans

@mixin g-unit($cols: 1, $total-col-count: 12, $gutter-width: 1.5rem) {
  $gutter-count: $cols - 1;
  $total-container-gutter-count: $total-col-count - 1;
  $total-element-gutter-width: $gutter-count * $gutter-width;
  $total-container-gutter-width: $gutter-width * $total-container-gutter-count;

  width: calc(((100% - #{$total-container-gutter-width}) / #{$total-col-count}) * #{$cols} + #{$total-element-gutter-width});

  margin-left: $gutter-width / 2;
  margin-right: $gutter-width / 2;

  &:first-child {
    margin-left: 0;
  }

  &:last-child {
    margin-right: 0;
  }
}
